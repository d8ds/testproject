def calculate_filing_regime_entropy(df, lookback_months=6):
    """
    Calculate entropy across three filing regimes: Low, Normal, High
    """
    monthly_stats = (
        df.with_columns([
            pl.col('filing_date').dt.truncate('1mo').alias('month')
        ])
        .group_by(['qid', 'month'])
        .agg([
            pl.col('document_id').n_unique().alias('monthly_filings')
        ])
        .sort(['qid', 'month'])
        .with_columns([
            pl.col('monthly_filings').rolling_mean(window_size=lookback_months).over('qid').alias('mean_filings'),
            pl.col('monthly_filings').rolling_std(window_size=lookback_months).over('qid').alias('std_filings')
        ])
        .with_columns([
            # Three mutually exclusive, exhaustive regimes
            pl.when(pl.col('monthly_filings') > pl.col('mean_filings') + 1.5 * pl.col('std_filings'))
            .then(pl.lit('high'))
            .when(pl.col('monthly_filings') < pl.col('mean_filings') - 0.5 * pl.col('std_filings'))
            .then(pl.lit('low'))
            .otherwise(pl.lit('normal'))
            .alias('regime')
        ])
    )
    
    # Calculate regime probabilities and entropy
    regime_entropy = (
        monthly_stats.group_by(['qid', 'regime'])
        .agg([
            pl.count().alias('regime_count')
        ])
        .with_columns([
            pl.col('regime_count').sum().over('qid').alias('total_months')
        ])
        .with_columns([
            (pl.col('regime_count') / pl.col('total_months')).alias('regime_prob')
        ])
        .group_by('qid')
        .agg([
            pl.col('regime_prob').map_elements(
                lambda probs: entropy(probs) if len(probs) > 0 else 0
            ).alias('regime_entropy'),
            # Also keep individual probabilities for analysis
            pl.col('regime').list().alias('regimes'),
            pl.col('regime_prob').list().alias('regime_probs')
        ])
    )
    
    return regime_entropy
