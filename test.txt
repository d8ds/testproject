def calculate_rolling_entropy_features(df, window_months=12):
    """
    Calculate entropy using rolling window - fixed version
    """
    from scipy.stats import entropy
    import numpy as np
    
    # Create monthly filing counts
    monthly_data = (
        df.with_columns([
            pl.col('filing_date').dt.truncate('1mo').alias('month')
        ])
        .group_by(['qid', 'month'])
        .agg([
            pl.col('document_id').n_unique().alias('monthly_filings')
        ])
        .sort(['qid', 'month'])
    )
    
    # Calculate rolling entropy properly
    def rolling_entropy_func(values):
        """Calculate entropy for a rolling window"""
        if len(values) < 3:  # Need minimum data
            return np.nan
        if values.sum() == 0:
            return 0.0
        
        # Convert to probabilities
        probs = values / values.sum()
        # Remove zeros to avoid log(0)
        probs = probs[probs > 0]
        
        if len(probs) <= 1:
            return 0.0
            
        return float(entropy(probs))  # Ensure float return
    
    rolling_features = (
        monthly_data
        .with_columns([
            # Calculate rolling entropy using custom function
            pl.col('monthly_filings')
            .rolling_map(
                rolling_entropy_func,
                window_size=window_months,
                min_periods=6
            )
            .over('qid')
            .alias('rolling_entropy'),
            
            # Rolling mean for comparison
            pl.col('monthly_filings')
            .rolling_mean(window_size=window_months, min_periods=6)
            .over('qid')
            .alias('rolling_mean_filings'),
            
            # Rolling std
            pl.col('monthly_filings')
            .rolling_std(window_size=window_months, min_periods=6)
            .over('qid')
            .alias('rolling_std_filings')
        ])
        .with_columns([
            # Calculate CV after getting mean and std
            (pl.col('rolling_std_filings') / pl.col('rolling_mean_filings'))
            .alias('rolling_cv')
        ])
    )
    
    # Join back to original data
    result_df = df.join(
        rolling_features.select(['qid', 'month', 'rolling_entropy', 'rolling_cv', 'rolling_mean_filings']),
        left_on=['qid', pl.col('filing_date').dt.truncate('1mo')],
        right_on=['qid', 'month'],
        how='left'
    )
    
    return result_df
